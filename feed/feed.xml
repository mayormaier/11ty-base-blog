<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Andrew Maier Blog</title>
	<subtitle>I am writing about my experiences as a beginner in web development and devops.</subtitle>
	
	<link href="https://mayormaier.github.io/11ty-base-blog/feed/feed.xml" rel="self"/>
	<link href="https://mayormaier.github.io/11ty-base-blog/"/>
	<updated>2022-02-28T00:00:00Z</updated>
	<id>https://mayormaier.github.io/11ty-base-blog/</id>
	<author>
		<name>Andrew Maier</name>
		<email>maierandrewd@gmail.com</email>
	</author>
	
	<entry>
		<title>Getting Started with open-wc and Web Components</title>
		<link href="https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/"/>
		<updated>2022-02-28T00:00:00Z</updated>
		<id>https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/</id>
		<content type="html">&lt;p&gt;&lt;em&gt;One month ago, I hadn&#39;t written a single line of JavaScript.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I knew that JavaScript was important, but I seemed to be scared away by the massive ecosystem. As I looked deeper into the powerful things that you can do with JavaScript, I knew I had to get my feet wet. If you&#39;re looking to get started with open-wc and Web Components, you&#39;re going to need to understand the fundamentals of plain vanilla JavaScript. That might sound daunting, but &lt;strong&gt;getting started with Javascript is easier than you think.&lt;/strong&gt; Today I&#39;ll show you why.&lt;/p&gt;
&lt;h2 id=&quot;javascript-basics&quot; tabindex=&quot;-1&quot;&gt;JavaScript Basics &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#javascript-basics&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before starting my journey with JavaScript I had intermediate programming experience. Most of my academic career I have used Java, and I&#39;ve written my personal projects in python. If you&#39;ve never written &lt;em&gt;any&lt;/em&gt; code, thats ok. We all start somewhere. Most language fundamental tutorials are beginner friendly.&lt;/p&gt;
&lt;p&gt;From a JavaScript newbie, &lt;strong&gt;I recommend the &lt;a href=&quot;https://www.linkedin.com/learning-login/share?account=76811570&amp;amp;forceAccount=false&amp;amp;redirect=https%3A%2F%2Fwww.linkedin.com%2Flearning%2Fjavascript-essential-training%3Ftrk%3Dshare_ent_url%26shareId%3DtagQlFJZTBmp1uXvG335Dw%253D%253D&quot;&gt;JavaScript Essential Training LinkedIn Learning Course&lt;/a&gt;.&lt;/strong&gt; This course helped me to get an understanding od the language as a whole while also understanding the JavaScript ecosystem. I&#39;m about 30% of the way through it, and plan on banging out some more after I finish this article.&lt;/p&gt;
&lt;p&gt;One more thing- one of the biggest surprises for me is that &lt;strong&gt;JavaScript&#39;s native runtime is in the browser&lt;/strong&gt; (Like Google Chrome). It took some getting used to, as I was more familiar with working completely in the command line. It is intuitive though, as a majority of JavaScript use cases involve the web in some capacity.&lt;/p&gt;
&lt;h2 id=&quot;preparing-the-javascript-environment&quot; tabindex=&quot;-1&quot;&gt;Preparing the JavaScript Environment &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#preparing-the-javascript-environment&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Unlike many languages (like Python, Java, and Go), you don&#39;t need to download a language interpreter to your machine. In fact, you run JavaScript code every time you visit &lt;em&gt;most&lt;/em&gt; websites. So, if you have a modern web browser installed, then you&#39;re golden.&lt;/p&gt;
&lt;h3 id=&quot;vs-code&quot; tabindex=&quot;-1&quot;&gt;VS Code &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#vs-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I use Visual Studio Code to write my JavaScript Code. It is very lightweight bare bones out of the box, but it has a rich extension ecosystem that you can use to increase its functionality.&lt;/p&gt;
&lt;p&gt;Head over to &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;code.visualstudio.com&lt;/a&gt; to install VS Code. Click on the big blue installation button to download the installer and follow the prompts when running it.&lt;/p&gt;
&lt;p&gt;One key extension that you will need when writing and testing vanilla JS is &amp;quot;Live Server&amp;quot;. This allows users to start a local web server for their current VS Code project with just one click.&lt;/p&gt;
&lt;h3 id=&quot;node.js&quot; tabindex=&quot;-1&quot;&gt;Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#node.js&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next step is to download Node.JS. You want to get the current LTS (Long Term Support) version for increased stability. To install, head to &lt;a href=&quot;https://nodejs.org/&quot;&gt;nodejs.org&lt;/a&gt; and click the nice big green &amp;quot;LTS&amp;quot; button. The site should recognize the OS that you are working with and give you the right installer.&lt;/p&gt;
&lt;p&gt;Node.JS enables you to run server-side JavaScript applications on your machine. Some people think that Node.JS is a JavaScript library or a framework or its own separate language, but &lt;strong&gt;Node.JS is none of those. Node.JS is a runtime for JavaScript.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After running the installer, check that Node.js was installed properly with &lt;code&gt;node -v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/njdfut6p7hnara15c1is.png&quot; alt=&quot;node -v output&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;npm&quot; tabindex=&quot;-1&quot;&gt;npm &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#npm&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node comes with a package manager for JavaScript called &lt;a href=&quot;https://npmjs.com/&quot;&gt;npm&lt;/a&gt;. npm enables you to use other people&#39;s code in your projects without needing to go and write it yourself. Users can find npm packages on the npm registry, then use them in their code by using the Node require() function and defining them in their projects&#39; &lt;code&gt;package.json&lt;/code&gt; file, creating a dependency. All of this can sound confusing at first, but for now, just know that you can piggyback off of other projects with npm.&lt;/p&gt;
&lt;p&gt;To verify that npm was installed correctly when you installed Node.js, you can run &lt;code&gt;npm -v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vxheujhvs0mzp23ec19.png&quot; alt=&quot;npm -v output&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;yarn&quot; tabindex=&quot;-1&quot;&gt;Yarn &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#yarn&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://yarnpkg.com/&quot;&gt;Yarn&lt;/a&gt; is another package manager for JavaScript. It is very similar to npm as it enables users to reuse code from other developers by helping them register dependencies in their project. It registers dependencies to the &lt;code&gt;package.json&lt;/code&gt; just like npm.&lt;/p&gt;
&lt;p&gt;With newer versions of Node, yarn comes pre-installed and can be installed without much hassle. Simply run &lt;code&gt;corepack enable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After doing this, you can verify that yarn is installed properly with &lt;code&gt;yarn -v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvilukqczym3hsfmtwlo.png&quot; alt=&quot;varn -v output&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;initializing-an-open-wc-starter-project&quot; tabindex=&quot;-1&quot;&gt;Initializing an open-wc starter project &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#initializing-an-open-wc-starter-project&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now that the basic software is installed and running, a new open-wc component can be created. This process is also relatively simple. First, create a new directory where your project will live and navigate to it. Then, run &lt;code&gt;npm init @open-wc&lt;/code&gt; If the command runs successfully, that means that you&#39;ve installed everything correctly and you are beginning to work on your first web component!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aauwov28d7m9coqn8kz5.png&quot; alt=&quot;Shows expected output of the initialization for open-wc&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This is the screen that you will see with instructions to set up the project.&lt;/p&gt;
&lt;p&gt;I&#39;ve initialized my starter project with the following settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;New project scaffold&lt;/li&gt;
&lt;li&gt;Web Component&lt;/li&gt;
&lt;li&gt;Linting, Testing, and Demoing enabled&lt;/li&gt;
&lt;li&gt;No TypeScript&lt;/li&gt;
&lt;li&gt;installed using yarn&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once these settings are selected, a browser window should open and connect to the Node web server that is serving the project. If that does not happen automatically, or you want to start up the server at a later date, simply run &lt;code&gt;npm start&lt;/code&gt;. Boom! Now you can take a look at how web components work on the web.&lt;/p&gt;
&lt;h2 id=&quot;analyzing-a-web-component&quot; tabindex=&quot;-1&quot;&gt;Analyzing a Web Component &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/webcomponent-intro/#analyzing-a-web-component&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web Components, even in their most simple form have numerous files that provide functionality. Each of these files has a unique purpose that enables web components to function as the easy to use, reusable HTML elements.&lt;/p&gt;
&lt;p&gt;First, lets look at the &lt;code&gt;index.html&lt;/code&gt; of this project, the file that the browser loads when this project is opened.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;demo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;module&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; html&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; render &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;lit&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;../hello-world.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; title &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// takes elements with id=demo and replaces with hello-world element&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      html&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;        &amp;lt;hello-world .title=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;title&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&gt;&lt;br /&gt;          some light-dom&lt;br /&gt;        &amp;lt;/hello-world&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#demo&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this file, there is a div with id=demo, that is then replaced by the &lt;code&gt;&amp;lt;hello-world&amp;gt;&lt;/code&gt; element when the script is loaded. The &lt;code&gt;&amp;lt;hello-world&amp;gt;&lt;/code&gt; element is hydrated with content referenced in &lt;code&gt;hello-world.js&lt;/code&gt;, which is imported to the script.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// imports the HelloWorld class from the source files&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; HelloWorld &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./src/HelloWorld.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// defines the &quot;&amp;lt;hello-world&gt;&quot; HTML tag from the HelloWorld class in the imported module&lt;/span&gt;&lt;br /&gt;window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;customElements&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello-world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; HelloWorld&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hello-world.js&lt;/code&gt; defines the &lt;code&gt;&amp;lt;hello-world&amp;gt;&lt;/code&gt; HTML tag with the HelloWorld Web Component.&lt;/p&gt;
&lt;p&gt;The meat of the element is found in &lt;code&gt;./src/HelloWorld.js&lt;/code&gt;. This component defines the functions and properties of the HelloWorld web component, represented as a class that extends the base HelloWorld class. For example, one of the functions called &lt;code&gt;__increment()&lt;/code&gt; increments the counter property of the HelloWorld object every time a button in the component is pressed.&lt;/p&gt;
&lt;p&gt;Many of the other files that come with the base &amp;quot;hello-world&amp;quot; web component serve important purposes also. I&#39;ve annotated many of the files found in this project and &lt;a href=&quot;https://github.com/mayormaier/edtechjoker-lab1/&quot;&gt;uploaded them to a GitHub repository that can be found here.&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Integrating APIs with JavaScript in the Front End</title>
		<link href="https://mayormaier.github.io/11ty-base-blog/posts/frontend-apis/"/>
		<updated>2022-02-28T00:00:00Z</updated>
		<id>https://mayormaier.github.io/11ty-base-blog/posts/frontend-apis/</id>
		<content type="html">&lt;h2 id=&quot;fetch-and-the-power-of-apis&quot; tabindex=&quot;-1&quot;&gt;Fetch and the Power of APIs &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/frontend-apis/#fetch-and-the-power-of-apis&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fetch()&lt;/code&gt; is an &lt;em&gt;asynchronous&lt;/em&gt; JavaScript function that allows client-side web applications to make HTTP Requests to a web endpoint. This is most commonly used to make API calls from the browser.&lt;/p&gt;
&lt;p&gt;Asynchronous functions are known as &amp;quot;non-blocking&amp;quot;. Rather than taking up a processing thread while waiting for a return value, non-blocking functions allow other operations to execute in the program. This results in much more responsive applications.&lt;/p&gt;
&lt;p&gt;Fetch&#39;s asynchronous property is enables it to free the processing thread while waiting for an API response. This is a great way of handing API calls, as responses can vary in speed depending on the destination server and application.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http://example.com/movies.json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;the above example is courtesy of Mozilla&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The fetch method is relatively simple. In its most basic form, &lt;code&gt;fetch()&lt;/code&gt; has one parameter, the URL of the HTTP endpoint. Other parameters can be added to send data to an endpoint (i.e., JSON for a HTTP PUT request). This enables developers to fully leverage API requests in their front end applications.&lt;/p&gt;
&lt;p&gt;In the example above, an HTTP GET request was made, which returns data from the server to the client. After the response returns successfully, the &lt;code&gt;.then()&lt;/code&gt; functions parse the response as JSON, then print it to the console. However, console logging is not the only thing that can be accomplished in this function.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.then()&lt;/code&gt; clauses can also be used to pull data from the API response and set it as a variable. For example, in the application presented in this example, the responses from  &lt;a href=&quot;https://www.freegeoip.app/json&quot;&gt;freegeoip.app/json&lt;/a&gt; are used to identify the location of a user at a specific IP address. The &lt;code&gt;latitude&lt;/code&gt; &lt;code&gt;longitude&lt;/code&gt; &lt;code&gt;city&lt;/code&gt; and &lt;code&gt;region_name&lt;/code&gt; fields are all variables that the API returns and are tracked by the application. Here&#39;s an example of the JSON data returned by the API:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;104.38.28.100&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;country_code&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;US&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;country_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;United States&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;region_code&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;PA&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;region_name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pennsylvania&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;city&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;University Park&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;zip_code&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;16802&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;time_zone&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;America/New_York&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;latitude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;longitude&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;-77&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token property&quot;&gt;&quot;metro_code&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;574&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;This JSON blob is sample API response from the &lt;a href=&quot;https://www.freegeoip.app/json&quot;&gt;freegeoip.app/json&lt;/a&gt; API.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;element-variables-and-rendering&quot; tabindex=&quot;-1&quot;&gt;Element Variables and Rendering &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/frontend-apis/#element-variables-and-rendering&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Variable assignment in the &lt;code&gt;then()&lt;/code&gt; method calls enables stateful updating of the application. Each time that the API is called and returns data successfully, the instance variables are updated, and the DOM is re-painted with the new data. The render() function determines how the page will be displayed each time that the DOM is painted. Not all variables in the application achieve this behavior- only variables defined in the &lt;code&gt;static get properties()&lt;/code&gt; method trigger the DOM to be re-painted. Note: you can also generate new variables based on the variables that are returned by an API call. For example, I set location equal to &lt;code&gt;$city, $region_name&lt;/code&gt; which is used many other times in the application.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;lat&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Number&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; String&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The properties defined in this method trigger the DOM to be re-painted&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let&#39;s discuss the &lt;code&gt;&amp;lt;location-from-ip&amp;gt;&lt;/code&gt; component in more depth. Firstly, the properties listed above populate the component with the data that it needs to render. The data relies on APIs to populate. The &lt;code&gt;getGEOIPData()&lt;/code&gt; function includes all of the logic to obtain these data points.&lt;/p&gt;
&lt;p&gt;Firstly, a &lt;code&gt;UserIP&lt;/code&gt; object instance is created to identify the IP address of the user. This relies on an API that returns the IP of the user making the request. This IP addres data is then fed into another API (&lt;a href=&quot;https://www.freegeoip.app/&quot;&gt;freegeoip.app&lt;/a&gt;) that takes the IP address from the user and returns location data about that IP address. See the example API response above. After the response is retuned, the given variables are updated which triggers a repainting of the DOM. This update feeds those new variables into a number of services defined in the &lt;code&gt;render()&lt;/code&gt; function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://maps.google.com/maps?q=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lat&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;long&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;t=&amp;amp;z=15&amp;amp;ie=UTF8&amp;amp;iwloc=&amp;amp;output=embed&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; html&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;      &amp;lt;iframe title=&quot;Where you are&quot; src=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;url&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;/iframe&gt;&lt;br /&gt;      &amp;lt;br /&gt;&amp;lt;a&lt;br /&gt;        href=&quot;https://www.google.com/maps/@&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;lat&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;long&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;,15z&quot;&lt;br /&gt;        target=&quot;_blank&quot;&lt;br /&gt;        &gt;Expand Map to &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/a&lt;br /&gt;      &gt;&lt;br /&gt;      &amp;lt;br /&gt;&amp;lt;br /&gt;&lt;br /&gt;      &amp;lt;wikipedia-query search=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;location&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;/wikipedia-query&gt;&lt;br /&gt;      &amp;lt;wikipedia-query search=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;city&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;/wikipedia-query&gt;&lt;br /&gt;      &amp;lt;wikipedia-query search=&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;region&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&gt;&amp;lt;/wikipedia-query&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;lat&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; variables are inserted into an Google Maps embed link that populates an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;lat&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt; and &lt;code&gt;location&lt;/code&gt; variables are used to populate a hyperlink that opens the location in the full Google Maps site.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;wikipedia-query&amp;gt;&lt;/code&gt; web component is leveraged to provide articles about the location determined by the GEOIP API. The compnent relies on a &lt;code&gt;search&lt;/code&gt; property that defines the wikipedia page to display. There are three &lt;code&gt;&amp;lt;wikipedia-query&amp;gt;&lt;/code&gt; tags total. One uses the &lt;code&gt;location&lt;/code&gt; property as the search string, and the other two use &lt;code&gt;city&lt;/code&gt; and &lt;code&gt;region&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tqtzywaadnkkyumy56ri.png&quot; alt=&quot;Image description&quot; /&gt;&lt;br /&gt;
&lt;em&gt;The &lt;code&gt;&amp;lt;location-from-ip&amp;gt;&lt;/code&gt; element, visually&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Ultimately, the use of APIs within web components can be achieved with ease and is a great way to add responsive elements to a static site.&lt;/p&gt;
&lt;p&gt;For more information about the API used in this application, see &lt;a href=&quot;https://www.freegeoip.app/&quot;&gt;freegeoip.app&lt;/a&gt;, &lt;a href=&quot;https://codepen.io/btopro/pen/yLNmVbw&quot;&gt;wikipedia element&lt;/a&gt;, &lt;a href=&quot;https://ip-fast.com/api/ip/&quot;&gt;IPFast IP Address API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/mayormaier/API-Project/blob/master/src/LocationFromIP.js&quot;&gt;application repository here&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;sources&quot; tabindex=&quot;-1&quot;&gt;Sources &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/frontend-apis/#sources&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts&quot;&gt;General asynchronous programming concepts - MDN Web Docs&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch&quot;&gt;Using Fetch - MDN Web Docs&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to build powerful sites from scratch with 11ty</title>
		<link href="https://mayormaier.github.io/11ty-base-blog/posts/11ty/"/>
		<updated>2022-02-28T00:00:00Z</updated>
		<id>https://mayormaier.github.io/11ty-base-blog/posts/11ty/</id>
		<content type="html">&lt;p&gt;If you&#39;ve been interested in the web space recently, you&#39;ve heard of static site generators like 11ty and Jekyll. These pieces of software take easily written markup such as markdown, nunjucks, and liquid and turn them into content that is ready for the web. Many developers want to author blog posts for their own site, and 11ty provides a way to do just that.&lt;/p&gt;
&lt;p&gt;While on the surface it seems simple, theres a lot under the hood that makes 11ty a machine.&lt;/p&gt;
&lt;h2 id=&quot;terms&quot; tabindex=&quot;-1&quot;&gt;Terms &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/11ty/#terms&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before starting, it&#39;s important to know terms that 11ty uses to describe their files. The names sound similar, but the differentiations are important.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;template&lt;/strong&gt; - a file that contains content (written in a language like markdown)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;layout&lt;/strong&gt; - pre-built wrappers for templates. Used to define a common structure for a set of templates/pages&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;front matter&lt;/strong&gt; - key-value pairs at the top of a template that define specific variables that are used when rendering pages in 11ty&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data file&lt;/strong&gt; - purpose built files that define variables to be inherited by all templates in a defined directory.
&lt;ul&gt;
&lt;li&gt;Ex. in the directory &lt;code&gt;/posts&lt;/code&gt;, &lt;code&gt;/posts/posts.json&lt;/code&gt; would be the directory data file, and would define variables that all other template files &lt;code&gt;/posts/*&lt;/code&gt; should inherit.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;getting-started&quot; tabindex=&quot;-1&quot;&gt;Getting Started &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/11ty/#getting-started&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;11ty can be intimidating at first, especially if you are new to command line tooling. To start, I followed the great getting started guide at&lt;/p&gt;
&lt;p&gt;Here, I will demonstrate three ways to build an 11ty site, both using templates and from scratch.&lt;/p&gt;
&lt;h2 id=&quot;method-1:-from-scratch&quot; tabindex=&quot;-1&quot;&gt;Method 1: &lt;a href=&quot;https://mayormaier.github.io/11ty-hello-horses/&quot;&gt;From scratch&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/11ty/#method-1:-from-scratch&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Shameless plug, I heavily leaned on the &lt;a href=&quot;https://www.youtube.com/watch?v=PPZGdolA_ns&amp;amp;t=7001s&quot;&gt;great tutorial&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/trostcodes?lang=en&quot;&gt;Alex Trost&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/BenDMyers&quot;&gt;Ben Meyers&lt;/a&gt; when completing this project.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One nice thing about 11ty is that you can start out VERY basic, then build up in complexity.&lt;br /&gt;
To start,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;initialize a new npm package &lt;code&gt;npm init&lt;/code&gt; and install 11ty &lt;code&gt;npm install @11ty/eleventy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create some template files &lt;code&gt;somethingCool.md&lt;/code&gt; and throw them in the project root&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;npx eleventy --serve&lt;/code&gt; and watch your templates turn into HTML in the &lt;code&gt;_site&lt;/code&gt; directory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now lets kick it up a notch.&lt;br /&gt;
First lets provide some organization to our project.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create an &lt;code&gt;.eleventy.js&lt;/code&gt; file&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;return { dir: { input: &amp;quot;src&amp;quot; } };&lt;/code&gt; in a new &lt;code&gt;module.exports()&lt;/code&gt; function&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; embeds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;eleventy-plugin-embed-everything&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;embeds&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addWatchTarget&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_site/assets/*.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setBrowserSyncConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;_site/assets/*.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;src&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;code&gt;.eleventy.js&lt;/code&gt; file. NOTE: this file contains additional plug in modules that you probably don&#39;t have installed yet. Only use this configuration if you have the defined modules installed.&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;create a new directory called &lt;code&gt;src&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move your precious templates to the new &lt;code&gt;src&lt;/code&gt; directory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, lets add some additional structure to our pages. When eleventy builds a page, it focuses on minimal HTML. No &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; information is included.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;in your &lt;code&gt;src&lt;/code&gt; directory, add a &lt;code&gt;_includes&lt;/code&gt; subdirectory. This is where you will store your layout files.&lt;/li&gt;
&lt;li&gt;create a new layout file. you can specify where the content should be inserted with ``&lt;/li&gt;
&lt;li&gt;specify this layout to be used in the front matter of a template using the &lt;code&gt;layout&lt;/code&gt; key:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token front-matter-block&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token front-matter yaml language-yaml&quot;&gt;layout: layoutFilename&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;---&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; cool&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; markdown&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lastly, lets add a plugin to this site. We will be installing the &lt;a href=&quot;https://www.npmjs.com/package/eleventy-plugin-embed-everything&quot;&gt;eleventy-embed-everything&lt;/a&gt; plugin.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;install the plugin with &lt;code&gt;npm install eleventy-plugin-embed-everything --save&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add the plugin to the &lt;code&gt;.eleventy.js&lt;/code&gt; file&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; embedEverything &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;eleventy-plugin-embed-everything&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;eleventyConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  eleventyConfig&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;embedEverything&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can embed media into the page simply by dropping its url on to the page.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.11ty.dev/docs/getting-started/&quot;&gt;More information&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/mayormaier/11ty-hello-horses&quot;&gt;Source repository&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;method-2:-based-on-a-template&quot; tabindex=&quot;-1&quot;&gt;Method 2: &lt;a href=&quot;https://mayormaier.github.io/11ty-base-blog/&quot;&gt;Based on a template&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/11ty/#method-2:-based-on-a-template&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The 11ty community has developed a plethora of templates that accomplish the initial configuration of 11ty quite well. Many of these sites contain a lot of useful tools and features, but on occasion this can bloat the final size of the project. The output files however remain flat and slender.&lt;/p&gt;
&lt;p&gt;The first step that I took when configuring this template was to modify the metadata of the site to match my details (name, url, email, etc.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/ww1RrOT.png&quot; alt=&quot;Modified configuration items&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Next, I modified the pathPrefix variable in the &lt;code&gt;.eleventy.js&lt;/code&gt; file. This allows the site to be deployed to GitHub pages without explicitly defining the pathPrefix in page links (which would break the site in development).&lt;/p&gt;
&lt;p&gt;Lastly, I added my articles to the &lt;code&gt;/posts/&lt;/code&gt; directory. Because much of the configuration has already been completed, it is pretty much plug and play for all of the articles. If additional subdirectories/categories are desired, more configuration is necessary.&lt;/p&gt;
&lt;p&gt;After inserting my articles, I specified some template metadata for each article. These vary slightly from the custom built template as different data variables are used, however they generally accomplish the same thing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/el03eOF.png&quot; alt=&quot;Template data in the front matter&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://eleventy-base-blog.netlify.app/&quot;&gt;More Information&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/mayormaier/11ty-base-blog&quot;&gt;Source Repository&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;method-3:-hax11ty&quot; tabindex=&quot;-1&quot;&gt;Method 3: &lt;a href=&quot;https://mayormaier.github.io/11ty-hax11ty-blog/&quot;&gt;hax11ty&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/11ty/#method-3:-hax11ty&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;hax11ty combines the powerful library of web components found in HAXCMS with the simplicity of static sites. Just like 11ty, it takes in template files, and outputs them as HTML. Just like in Method 2, utilizing a pre-built 11ty configuration saves a lot of time when you need to get a site off the ground quickly. With a clean theme and the addition of web components, hax11ty takes static sites to the next level.&lt;/p&gt;
&lt;p&gt;For example, adding the &lt;code&gt;&amp;lt;video-player&amp;gt;&lt;/code&gt; tag to our markdown yields a rendered video-player component on the page.:&lt;/p&gt;
&lt;pre class=&quot;language-markdown&quot;&gt;&lt;code class=&quot;language-markdown&quot;&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; things&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; and&lt;br /&gt;&lt;span class=&quot;token list punctuation&quot;&gt;-&lt;/span&gt; stuff&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;video-player&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;https://www.youtube.com/watch?v=dQw4w9WgXcQ&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;video-player&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/oTX4MeQ.png&quot; alt=&quot;Page with the rendered video-player component&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;data-structure&quot; tabindex=&quot;-1&quot;&gt;Data Structure &lt;a class=&quot;direct-link&quot; href=&quot;https://mayormaier.github.io/11ty-base-blog/posts/11ty/#data-structure&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When using 11ty, there is a clear division between source content and static HTML site files. 11ty will locate the content for your site, written in any of the supported templating languages, then convert it into HTML and place it into the &lt;code&gt;_site&lt;/code&gt; directory. Within the &lt;code&gt;_site&lt;/code&gt; directory, there is an exact clone of the directory structure where all of the source files lived previously. This &lt;code&gt;_site&lt;/code&gt; directory is key, because this is the directory that includes the HTML files needed to power a website. The &lt;code&gt;_site&lt;/code&gt; directory can be zipped and uploaded to a website hosting platform.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cAx5e8J.png&quot; alt=&quot;Template files (source)&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/D4gpoxf.png&quot; alt=&quot;Output files&quot; /&gt;&lt;/p&gt;
&lt;p&gt;These HTML files are generated through a process that 11ty calls &lt;strong&gt;&lt;a href=&quot;https://www.11ty.dev/docs/data-cascade/&quot;&gt;the data cascade&lt;/a&gt;&lt;/strong&gt; The data cascade dictates the order of priority for sources of layout and style data for the static HTML files. While extremely technical, the cascade basically begins by applying global data to the template files, and then overwrites these data files as it moves deeper into the directory. Data files with the same name and same directory as the templating files are given the highest priority.&lt;/p&gt;
&lt;p&gt;Lastly, the YAML front matter in each templating file is applied, which overwrites values further up in the data cascade. This is helpful for applying specific properties, such as a permalink, to individual files.&lt;/p&gt;
&lt;p&gt;When a website goes live, the folder structure that contains the markdown files transfers directly to the generated static HTML files. So, for example, if a particular markdown file is located at &lt;code&gt;/src/welcome.md&lt;/code&gt; then the subsequent HTML file will appear at &lt;code&gt;_site/src/welcome/index.html&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One caveat to 11ty is that it does not automatically copy non-supported file types (anything other than files written in the supported templating languages) into the &lt;code&gt;_site&lt;/code&gt; directory. In order to request that these files are copied into the &lt;code&gt;_site&lt;/code&gt; directory, use the &lt;code&gt;--formats =&lt;/code&gt; flag on the command line to specify certain file types.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://elmsln.github.io/hax11ty/&quot;&gt;More information&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/mayormaier/11ty-hax11ty-blog&quot;&gt;Source Repo&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
